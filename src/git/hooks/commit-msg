#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

# test "" = "$(grep '^Signed-off-by: ' "$1" |
# 	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
# 	echo >&2 Duplicate Signed-off-by lines.
# 	exit 1
# }

filterNotIncludingAfter_matchingString() {
    sed -e '/'"$1"'/,$d'
}

filterLinesThatStartWith_commentChar() {
    sed -e '/^'"$1"'/d'
}

# `appendBranchNameTo_CommitMessageFile` resides here and not in `prepare-commit-msg` 
# to not modify default content of commit_message which is prepared automatically when
# commit_msg is opened with `git.config.core.editor`
appendBranchNameTo_CommitMessageFile() {
    local originalMessage=`cat "$1" | filterNotIncludingAfter_matchingString "------------------------ >8 ------------------------" | filterLinesThatStartWith_commentChar "#"`
    if [ -z "$originalMessage" ] ;then
        echo "Aborting commit due to empty commit message."
        return 1
    fi
    local branchName=$(git branch | grep '*' | sed 's/* //')
    echo "$originalMessage\n\n---\nOn branch:\n$branchName\n" > "$1"
}
appendBranchNameTo_CommitMessageFile "$1"

